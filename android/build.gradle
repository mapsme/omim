buildscript {
  repositories {
    jcenter()
  }

  dependencies {
    classpath 'com.android.tools.build:gradle:1.3.1'
  }
}

allprojects {
  repositories {
    jcenter()
    mavenCentral()
  }
}

apply plugin: 'com.android.application'
apply from: 'secure.properties'

dependencies {
  // android support libs
  compile 'com.android.support:support-v4:22.2.1'
  compile 'com.android.support:appcompat-v7:22.2.1'
  compile 'com.android.support:recyclerview-v7:22.2.1'
  compile 'com.android.support:design:22.2.1'
  // google play services
  compile 'com.google.android.gms:play-services-location:7.8.0'
  compile 'com.google.android.gms:play-services-analytics:7.8.0'
  compile 'com.google.android.gms:play-services-plus:7.8.0'
  // 3-party
  compile 'com.facebook.android:facebook-android-sdk:4.6.0'
  compile 'com.parse.bolts:bolts-android:1.2.1'
  compile 'com.parse:parse-android:1.10.2'
  compile 'com.google.code.gson:gson:2.4'
  compile fileTree(dir: '3rd_party', include: '*.jar')
  // BottomSheet
  compile project(":3rd_party:BottomSheet")
  // LinearLayoutManager allowing wrap_content of RecyclerView-s
  // TODO remove this library when default LinearLayoutManager will be fixed.
  compile 'org.solovyev.android.views:linear-layout-manager:0.5@aar'
}

def getDate() {
  def date = new Date()
  def formattedDate = date.format('yyMMdd')
  return formattedDate
}

android {
  // All properties are read from gradle.properties file
  compileSdkVersion propTargetSdkVersion.toInteger()
  buildToolsVersion propBuildToolsVersion

  defaultConfig {
    // Default package name is taken from the manifest and should be com.mapswithme.maps
    versionCode propVersionCode.toInteger()
    versionName propVersionName
    minSdkVersion propMinSdkVersion.toInteger()
    targetSdkVersion propTargetSdkVersion.toInteger()
    applicationId 'com.mapswithme.maps.pro'
    buildConfigField 'String', 'SUPPORT_MAIL', '"android@maps.me"'
    buildConfigField 'String', 'REVIEW_URL', '"market://details?id=com.mapswithme.maps.pro"'
    buildConfigField 'int', 'RATING_THRESHOLD', '5'
    buildConfigField 'boolean', 'ALLOW_PREF_MAP_STYLE', 'false'
  }

  sourceSets.main {
    manifest.srcFile 'AndroidManifest.xml'
    res.srcDirs = ['res']
    java.srcDirs = ['src', '../3party/Alohalytics/src/android/java']
    // assets folder is auto-generated by tools/android/update_assets.sh, so we keep all static resources in separate folders.
    assets.srcDirs = ['assets']
    jniLibs.srcDirs = ['libs']
  }

  productFlavors {
    google {
      versionName = android.defaultConfig.versionName + '-Google'
      buildConfigField 'String', 'SUPPORT_MAIL', '"googleplay@maps.me"'
    }

    samsung {
      versionName = android.defaultConfig.versionName + '-Samsung'
      buildConfigField 'String', 'REVIEW_URL', '"samsungapps://ProductDetail/com.mapswithme.maps.pro"'
      buildConfigField 'String', 'SUPPORT_MAIL', '"samsung@maps.me"'
      android.sourceSets.samsung.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    amazon {
      versionName = android.defaultConfig.versionName + '-Amazon'
      buildConfigField 'String', 'REVIEW_URL', '"amzn://apps/android?p=com.mapswithme.maps.pro"'
      buildConfigField 'String', 'SUPPORT_MAIL', '"amazon@maps.me"'
      buildConfigField 'int', 'RATING_THRESHOLD', '4'
      android.sourceSets.amazon.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    yandex {
      versionName = android.defaultConfig.versionName + '-Yandex'
      buildConfigField 'String', 'REVIEW_URL', '"yastore://details?id=com.mapswithme.maps.pro"'
      android.sourceSets.yandex.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    preinstall {
      versionName = android.defaultConfig.versionName + '-Preinstall'
      buildConfigField 'String', 'SUPPORT_MAIL', '"googleplay@maps.me"'
    }

    cipherlab {
      versionName = android.defaultConfig.versionName + '-CipherLab'
      android.sourceSets.cipherlab.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    xiaomi {
      versionName = android.defaultConfig.versionName + '-Xiaomi'
      buildConfigField 'String', 'REVIEW_URL', '"http://app.mi.com/detail/85835?ref=search"'
      android.sourceSets.xiaomi.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    lenovo {
      versionName = android.defaultConfig.versionName + '-Lenovo'
      android.sourceSets.lenovo.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    web {
      versionName = android.defaultConfig.versionName + '-Web'
      android.sourceSets.web.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    nineApp {
      versionName = android.defaultConfig.versionName + '-9app'
      buildConfigField 'String', 'REVIEW_URL', '"http://www.9apps.com/android-apps/mapswithme-maps-pro/"'
      android.sourceSets.nineApp.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    mobogenie {
      versionName = android.defaultConfig.versionName + '-Mobogenie'
      android.sourceSets.mobogenie.assets.srcDirs = ['flavors/mwm-ttf-assets']
    }

    tencent {
      versionName = android.defaultConfig.versionName + '-Tencent'
      android.sourceSets.tencent.assets.srcDirs = ['flavors/mwm-ttf-assets']
      // TODO While store url is unknown, force all rating reviews to be sent to our email.
      // Change it in the next version after publishing app to the store.
      buildConfigField 'int', 'RATING_THRESHOLD', '6'
    }

    baidu {
      versionName = android.defaultConfig.versionName + '-Baidu'
      android.sourceSets.baidu.assets.srcDirs = ['flavors/mwm-ttf-assets']
      // TODO While store url is unknown, force all rating reviews to be sent to our email.
      // Change it in the next version after publishing app to the store.
      buildConfigField 'int', 'RATING_THRESHOLD', '6'
    }

    appChina {
      versionName = android.defaultConfig.versionName + '-AppChina'
      android.sourceSets.appChina.assets.srcDirs = ['flavors/mwm-ttf-assets']
      // TODO While store url is unknown, force all rating reviews to be sent to our email.
      // Change it in the next version after publishing app to the store.
      buildConfigField 'int', 'RATING_THRESHOLD', '6'
    }

    moboMarket {
      versionName = android.defaultConfig.versionName + '-MoboMarket'
      android.sourceSets.moboMarket.assets.srcDirs = ['flavors/mwm-ttf-assets']
      // TODO While store url is unknown, force all rating reviews to be sent to our email.
      // Change it in the next version after publishing app to the store.
      buildConfigField 'int', 'RATING_THRESHOLD', '6'
    }
  }

  // Currently (as of 1.2.3 gradle plugin) ABI filters aren't supported inside of product flavors, so we cannot generate splitted builds only for Google build.
  // TODO check that feature when new gradle plugins will appear
  // connected bugreport https://code.google.com/p/android/issues/detail?id=178606
  splits {
    abi {
      enable true
      reset()
      include 'x86', 'armeabi-v7a'
      universalApk true
    }
  }

  // TODO: Fix a lot of lint errors in our code
  lintOptions {
    abortOnError false
  }

  gradle.projectsEvaluated {
    android.applicationVariants.all { variant ->
      def task = variant.name.capitalize()
      def runTask = "run$task"
      def installTask = "install$task"
      project.task(type: Exec, "${runTask}", dependsOn: "${installTask}") {
        def component = "$applicationId/com.mapswithme.maps.DownloadResourcesActivity"
        executable "sh"
        args "-c", "adb shell am start -n ${component}"
      }
    }
  }

  signingConfigs {
    mapswithme {
      storeFile file(spropStoreFile)
      storePassword spropStorePassword
      keyAlias spropKeyAlias
      keyPassword spropKeyPassword
    }

    mapswithmeDebug {
      storeFile file('../tools/android/debug.keystore')
      storePassword '12345678'
      keyAlias 'debug'
      keyPassword '12345678'
    }
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'   // Allows to install debug and release builds together
      versionNameSuffix '-debug'
      jniDebuggable true           // Enable jni debug build
      zipAlignEnabled true
      signingConfig signingConfigs.mapswithmeDebug
      android.sourceSets.debug.setRoot('flavors/debug')
      buildConfigField 'boolean', 'ALLOW_PREF_MAP_STYLE', 'true'
    }

    release {
      signingConfig signingConfigs.mapswithme
      minifyEnabled true
      shrinkResources true
      proguardFile('proguard-mwm.txt')
    }

    beta {
      applicationIdSuffix '.beta'
      versionNameSuffix '-beta'
      signingConfig signingConfigs.mapswithme
      android.sourceSets.beta.setRoot('flavors/beta')
      buildConfigField 'boolean', 'ALLOW_PREF_MAP_STYLE', 'true'
    }
  }

  // We don't compress these extensions in assets/ because our random FileReader can't read zip-compressed files from apk
  aaptOptions {
    noCompress 'txt', 'bin', 'html', 'png', 'json', 'mwm', 'ttf', 'sdf', 'ui'
    ignoreAssetsPattern "!.svn:!.git:!.DS_Store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
  }

  // Enables new Java features in KitKat+ but needs Java 1.7 installed
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }
}

import com.android.build.OutputFile
project.ext.versionCodes = ['armeabi-v7a':1, 'x86':2]

android.applicationVariants.all { variant ->
  variant.outputs.each { output ->
    if (output.outputFile != null && output.outputFile.name.endsWith('.apk')) {
      def file = output.outputFile
      // version at the end of each built apk
      output.outputFile = new File(file.parent, file.name.replace(".apk", "-" + android.defaultConfig.versionName + "-" + getDate() + ".apk"))
      // set different versionCodes for different ABIs
      int abiVersionCode = project.ext.versionCodes.get(output.getFilter(OutputFile.ABI)) ?: 0
      output.versionCodeOverride = (abiVersionCode * 1000) + android.defaultConfig.versionCode
    }
  }
}

//@{ Below are tasks needed to compile our NDK part
apply plugin: 'base'

task cppLibsBuildDebug(type: Exec, description: 'Building DEBUG version of static C++ libraries') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'debug'
}

task cppLibsBuildDebugArm(type: Exec, description: 'Building DEBUG version of static C++ libraries (ARM only)') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'debug', 'armeabi-v7a-hard'
}

task cppLibsBuildDebugIntel(type: Exec, description: 'Building DEBUG version of static C++ libraries (x86 only)') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'debug', 'x86'
}

task cppLibsBuildRelease(type: Exec, description: 'Building RELEASE/PRODUCTION version of static C++ libraries') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'production'
}

task cppLibsBuildReleaseArm(type: Exec, description: 'Building RELEASE/PRODUCTION version of static C++ libraries (ARM only)') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'production', 'armeabi-v7a-hard'
}

task cppLibsBuildReleaseIntel(type: Exec, description: 'Building RELEASE/PRODUCTION version of static C++ libraries (x86 only)') {
  commandLine 'bash', '../tools/autobuild/android.sh', 'production', 'x86'
}

def PARAM_PARALLEL_TASK_COUNT = '-j' + (Runtime.runtime.availableProcessors() + 1)
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def NDK_BUILD = properties.getProperty('ndk.dir') + '/ndk-build'

if (System.properties['os.name'].toLowerCase().contains('windows'))
  NDK_BUILD += ".cmd"

task ndkBuildDebug(type: Exec, dependsOn: 'cppLibsBuildDebug', description: 'Building DEBUG jni sources') {
  def clArgs = ([NDK_BUILD, PARAM_PARALLEL_TASK_COUNT] + propDebugNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildDebugArm(type: Exec, dependsOn: 'cppLibsBuildDebugArm', description: 'Building DEBUG jni sources (ARM only)') {
  def clArgs = ([NDK_BUILD, PARAM_PARALLEL_TASK_COUNT, 'NDK_ABI_TO_BUILD=armeabi-v7a-hard'] + propDebugNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildDebugIntel(type: Exec, dependsOn: 'cppLibsBuildDebugIntel', description: 'Building DEBUG jni sources (x86 only)') {
  def clArgs = ([NDK_BUILD, PARAM_PARALLEL_TASK_COUNT, 'NDK_ABI_TO_BUILD=x86'] + propDebugNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildRelease(type: Exec, dependsOn: 'cppLibsBuildRelease', description: 'Building RELEASE/PRODUCTION jni sources') {
  def clArgs = ([NDK_BUILD, PARAM_PARALLEL_TASK_COUNT] + propReleaseNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildReleaseArm(type: Exec, dependsOn: 'cppLibsBuildReleaseArm', description: 'Building RELEASE/PRODUCTION jni sources (ARM only)') {
  def clArgs = ([NDK_BUILD, PARAM_PARALLEL_TASK_COUNT, 'NDK_ABI_TO_BUILD=armeabi-v7a-hard'] + propReleaseNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildReleaseIntel(type: Exec, dependsOn: 'cppLibsBuildReleaseIntel', description: 'Building RELEASE/PRODUCTION jni sources (x86 only)') {
  def clArgs = ([NDK_BUILD, PARAM_PARALLEL_TASK_COUNT, 'NDK_ABI_TO_BUILD=x86'] + propReleaseNdkFlags.split(' ')).flatten()
  commandLine clArgs
}

task ndkBuildClean(type: Exec, description: 'Clean native libraries') {
  commandLine NDK_BUILD, 'clean'
}

tasks.withType(JavaCompile) { compileTask ->
  if (compileTask.name.contains('Release') || compileTask.name.contains('Beta')) {
    compileTask.dependsOn ndkBuildRelease
  } else {
    compileTask.dependsOn ndkBuildDebug
  }
}

clean.dependsOn 'ndkBuildClean'
