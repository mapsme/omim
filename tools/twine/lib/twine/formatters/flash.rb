module Twine
  module Formatters
    class Flash < Abstract
      def format_name
        'flash'
      end

      def extension
        '.properties'
      end

      def can_handle_directory?(path)
        return false
      end

      def default_file_name
        return 'resources.properties'
      end

      def determine_language_given_path(path)
        return
      end

      def read(io, lang)
        last_comment = nil
        while line = io.gets
          match = /((?:[^"\\]|\\.)+)\s*=\s*((?:[^"\\]|\\.)*)/.match(line)
          if match
            key = match[1]
            value = match[2].strip
            value.gsub!(/\{[0-9]\}/, '%@')
            set_translation_for_key(key, lang, value)
            if last_comment
              set_comment_for_key(key, last_comment)
            end
          end
          
          match = /# *(.*)/.match(line)
          if match
            last_comment = match[1]
          else
            last_comment = nil
          end
        end
      end

      def format_sections(strings, lang)
        super + "\n"
      end

      def format_header(lang)
        "## Flash Strings File\n## Generated by Twine #{Twine::VERSION}\n## Language: #{lang}"
      end

      def format_section_header(section)
        "## #{section.name} ##\n"
      end

      def format_comment(row, lang)
        "# #{row.comment}\n" if row.comment
      end

      def key_value_pattern
        "%{key}=%{value}"
      end

      def format_value(value)
        placeHolderNumber = -1
        value.gsub(/%[d@]/) { placeHolderNumber += 1; '{%d}' % placeHolderNumber }
      end
    end
  end
end

Twine::Formatters.formatters << Twine::Formatters::Flash.new
