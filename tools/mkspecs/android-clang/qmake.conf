# NDK_ROOT should be defined for qmake.
# NDK_HOST should be defined for qmake.
# NDK_ABI optionally can be defined to any abi supported by NDK.

#########################################################################

ANDROID_TARGET_ABI = $$(NDK_ABI)
# By default use armv7 architecture.
isEmpty( ANDROID_TARGET_ABI ): ANDROID_TARGET_ABI = armeabi-v7a

# Minimum supported platform is Android 4.0.3.
ANDROID_PLATFORM = android-15

GCC_VERSION = 4.9

QMAKE_APPLE_DEVICE_ARCHS = $$ANDROID_TARGET_ABI

MAKEFILE_GENERATOR = UNIX
QMAKE_COMPILER     = $$(NDK_ROOT)/toolchains/llvm/prebuilt/$$(NDK_HOST)/bin/clang
QMAKE_CC           = $$QMAKE_COMPILER
QMAKE_CXX          = $$(NDK_ROOT)/toolchains/llvm/prebuilt/$$(NDK_HOST)/bin/clang++
QMAKE_LINK_C       = $$QMAKE_CC
QMAKE_LINK_C_SHLIB = $$QMAKE_CC
QMAKE_LINK         = $$QMAKE_CXX
QMAKE_LINK_SHLIB   = $$QMAKE_CXX

QMAKE_CFLAGS_RELEASE   *= -O3 -g -DNDEBUG -DRELEASE -D_RELEASE
QMAKE_CXXFLAGS_RELEASE *= $$QMAKE_CFLAGS_RELEASE
QMAKE_CFLAGS_DEBUG     *= -O0 -g -DDEBUG -D_DEBUG
QMAKE_CXXFLAGS_DEBUG   *= $$QMAKE_CFLAGS_DEBUG

BASE_CXX_INCLUDE_PATH = $$(NDK_ROOT)/sources/cxx-stl/llvm-libc++
BASE_GNUSTL_INCLUDE_PATH = $$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$$GCC_VERSION

# Customizations for each arch
contains(ANDROID_TARGET_ABI, x86) {
  # x86 toolchain
  GCC_TOOLCHAIN   = $$(NDK_ROOT)/toolchains/x86-$$GCC_VERSION/prebuilt/$$(NDK_HOST)
  GCC_TARGET      = i686-none-linux-android
  QMAKE_CFLAGS   *= -ffunction-sections -funwind-tables -fstack-protector-strong -fPIC -no-canonical-prefixes -fomit-frame-pointer -fstrict-aliasing

  PLATFORM_INCLUDE_PATH = $$(NDK_ROOT)/platforms/$$ANDROID_PLATFORM/arch-x86/usr/include
  ABI_INCLUDE_PATH      = $$BASE_CXX_INCLUDE_PATH/../gabi++/include
  ABI_GNUSTL_INCLUDE_PATH = $$BASE_GNUSTL_INCLUDE_PATH/libs/x86/include
  AR_FULL_PATH          = $$(NDK_ROOT)/toolchains/x86-$$GCC_VERSION/prebuilt/$$(NDK_HOST)/bin/i686-linux-android-ar

} else {

  contains(ANDROID_TARGET_ABI, mips) {
    # mips toolchain
    GCC_TOOLCHAIN   = $$(NDK_ROOT)/toolchains/mipsel-linux-android-$$GCC_VERSION/prebuilt/$$(NDK_HOST)
    GCC_TARGET      = mipsel-none-linux-android
    QMAKE_CFLAGS   *= -fpic -fno-strict-aliasing -finline-functions -ffunction-sections -funwind-tables -fmessage-length=0 -no-canonical-prefixes -fomit-frame-pointer

    PLATFORM_INCLUDE_PATH = $$(NDK_ROOT)/platforms/$$ANDROID_PLATFORM/arch-mips/usr/include
    ABI_INCLUDE_PATH      = $$BASE_CXX_INCLUDE_PATH/../gabi++/include
    ABI_GNUSTL_INCLUDE_PATH = $$BASE_GNUSTL_INCLUDE_PATH/libs/mips/include
    AR_FULL_PATH          = $$(NDK_ROOT)/toolchains/mipsel-linux-android-$$GCC_VERSION/prebuilt/$$(NDK_HOST)/bin/mipsel-linux-android-ar

  } else {
    # armeabi or armeabi-v7a or armeabi-v7a-hard toolchains
    GCC_TOOLCHAIN   = $$(NDK_ROOT)/toolchains/arm-linux-androideabi-$$GCC_VERSION/prebuilt/$$(NDK_HOST)
    QMAKE_CFLAGS   *= -fpic -ffunction-sections -funwind-tables -fstack-protector-strong -no-canonical-prefixes -mthumb -fomit-frame-pointer -fno-strict-aliasing -fno-integrated-as

    PLATFORM_INCLUDE_PATH = $$(NDK_ROOT)/platforms/$$ANDROID_PLATFORM/arch-arm/usr/include
    ABI_INCLUDE_PATH      = $$BASE_CXX_INCLUDE_PATH/../llvm-libc++abi/include
    AR_FULL_PATH          = $$(NDK_ROOT)/toolchains/arm-linux-androideabi-$$GCC_VERSION/prebuilt/$$(NDK_HOST)/bin/arm-linux-androideabi-ar

    contains(ANDROID_TARGET_ABI, armeabi-v7a-hard) {
      GCC_TARGET    = armv7-none-linux-androideabi
      QMAKE_CFLAGS *= -march=armv7-a -mfpu=vfpv3-d16 -mhard-float -D_NDK_MATH_NO_SOFTFP=1
      ABI_GNUSTL_INCLUDE_PATH = $$BASE_GNUSTL_INCLUDE_PATH/libs/armeabi-v7a/include

    } else {
      contains(ANDROID_TARGET_ABI, armeabi-v7a) {
        GCC_TARGET    = armv7-none-linux-androideabi
        QMAKE_CFLAGS *= -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16
        ABI_GNUSTL_INCLUDE_PATH = $$BASE_GNUSTL_INCLUDE_PATH/libs/armeabi-v7a/include

      } else {
        # armeabi (the oldest one) arch
        GCC_TARGET    = armv5te-none-linux-androideabi
        QMAKE_CFLAGS *= -march=armv5te -mtune=xscale -msoft-float
        ABI_GNUSTL_INCLUDE_PATH = $$BASE_GNUSTL_INCLUDE_PATH/libs/armeabi/include
      }
    }
  }
}

QMAKE_CFLAGS *= -DANDROID -gcc-toolchain $$GCC_TOOLCHAIN -target $$GCC_TARGET
QMAKE_CFLAGS *= -Wa,--noexecstack -Wformat -Werror=format-security
# to avoid warning: empty struct has size 0 in C, size 1 in C++ in struct lconv {};
# in android-ndk/platforms/android-5/arch-arm/usr/include/locale.h
QMAKE_CFLAGS *= -Wno-extern-c-compat -Wno-deprecated-register

QMAKE_CFLAGS *= --sysroot=$$PLATFORM_INCLUDE_PATH/../..

QMAKE_CXXFLAGS *= $$QMAKE_CFLAGS -std=c++11 -fexceptions -frtti


CONFIG *= $$ANDROID_PLATFORM hide_symbols warn_on dwarf2

QMAKE_CFLAGS_WARN_ON    = -Wall -W
QMAKE_CFLAGS_WARN_OFF   =
QMAKE_CFLAGS_HIDESYMS   = -fvisibility=hidden
QMAKE_CXXFLAGS_HIDESYMS = $$QMAKE_CFLAGS_HIDESYMS -fvisibility-inlines-hidden

# modifications to linux.conf
QMAKE_AR                = $$AR_FULL_PATH cqsD


QMAKE_INCDIR            = $$BASE_CXX_INCLUDE_PATH/include
QMAKE_INCDIR           *= $$ABI_INCLUDE_PATH
QMAKE_INCDIR           *= $$BASE_CXX_INCLUDE_PATH/../../android/support/include
QMAKE_INCDIR           *= $$PLATFORM_INCLUDE_PATH
#QMAKE_INCDIR           *= $$BASE_GNUSTL_INCLUDE_PATH/include
#QMAKE_INCDIR           *= $$BASE_GNUSTL_INCLUDE_PATH/include/backward
#QMAKE_INCDIR           *= $$ABI_GNUSTL_INCLUDE_PATH


#QMAKE_LIBDIR            = $$ANDROID_SOURCES_CXX_STL_LIBDIR $$ANDROID_PLATFORM_PATH/lib

QMAKE_TAR             = tar -cf
QMAKE_GZIP            = gzip -9f

QMAKE_COPY            = cp -f
QMAKE_COPY_FILE       = $(COPY)
QMAKE_COPY_DIR        = $(COPY) -r
QMAKE_MOVE            = mv -f
QMAKE_DEL_FILE        = rm -f
QMAKE_DEL_DIR         = rmdir
QMAKE_STRIP           = strip
QMAKE_STRIPFLAGS_LIB += --strip-unneeded
QMAKE_CHK_DIR_EXISTS  = test -d
QMAKE_MKDIR           = mkdir -p

QMAKE_PREFIX_SHLIB      = lib
QMAKE_PREFIX_STATICLIB  = lib
QMAKE_EXTENSION_STATICLIB = a

load(qt_config)
